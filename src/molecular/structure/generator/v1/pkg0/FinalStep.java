/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package molecular.structure.generator.v1.pkg0;


import edu.uci.ics.jung.graph.SparseMultigraph;
import ilog.concert.IloConstraint;
import ilog.concert.IloException;
import ilog.concert.IloIntVar;
import ilog.cp.IloCP;
import java.awt.BorderLayout;
import java.awt.Dialog;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Date;
import molecular.structure.generator.v1.pkg0.entities.molecule;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;

import javax.swing.SwingWorker;

import molecular.structure.generator.v1.pkg0.entities.GraphModelisation;
import molecular.structure.generator.v1.pkg0.entities.MyLink;
import molecular.structure.generator.v1.pkg0.entities.MyNode;



/**
 *
 * @author OMRANI
 */


public class FinalStep extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    
    public molecule FinalStepMol = new molecule() ;
  


   
    public FinalStep(molecule m) {
         
        FinalStepMol=m;
        initComponents();
        this.setLocationRelativeTo(null);       
        jRadioOne.setSelected(true);
        jLabelValidateStep4.setVisible(false);
       this.jLabel5.setText(this.FinalStepMol.GetStringOfMolecularFormula());

}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaResult = new javax.swing.JTextArea();
        ActualiserGeneration = new javax.swing.JLabel();
        jRadioAll = new javax.swing.JRadioButton();
        jRadioOne = new javax.swing.JRadioButton();
        jLabelValidateStep4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232), 2));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel12.setBackground(new java.awt.Color(245, 245, 245));
        jPanel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 10));

        jTextAreaResult.setColumns(20);
        jTextAreaResult.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextAreaResult.setForeground(new java.awt.Color(45, 118, 232));
        jTextAreaResult.setRows(5);
        jTextAreaResult.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        jTextAreaResult.setCaretColor(new java.awt.Color(45, 118, 232));
        jTextAreaResult.setDisabledTextColor(new java.awt.Color(45, 118, 232));
        jTextAreaResult.setMargin(new java.awt.Insets(2, 20, 2, 10));
        jScrollPane3.setViewportView(jTextAreaResult);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel12Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 370, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel12Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        ActualiserGeneration.setBackground(new java.awt.Color(255, 255, 255));
        ActualiserGeneration.setForeground(new java.awt.Color(255, 255, 255));
        ActualiserGeneration.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ActualiserGeneration.setIcon(new javax.swing.ImageIcon(getClass().getResource("/molecular/structure/generator/v1/pkg0/images/icons8_Synchronize_52px.png"))); // NOI18N
        ActualiserGeneration.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        ActualiserGeneration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ActualiserGenerationMouseClicked(evt);
            }
        });

        jRadioAll.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jRadioAll.setForeground(new java.awt.Color(0, 51, 204));
        jRadioAll.setText("ALL Solutions");
        jRadioAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioAllActionPerformed(evt);
            }
        });

        jRadioOne.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jRadioOne.setForeground(new java.awt.Color(0, 51, 204));
        jRadioOne.setText("Single Solution");
        jRadioOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioOneActionPerformed(evt);
            }
        });

        jLabelValidateStep4.setBackground(new java.awt.Color(255, 255, 255));
        jLabelValidateStep4.setForeground(new java.awt.Color(255, 255, 255));
        jLabelValidateStep4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelValidateStep4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/molecular/structure/generator/v1/pkg0/images/molecule.jpg"))); // NOI18N
        jLabelValidateStep4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        jLabelValidateStep4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelValidateStep4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioOne, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioAll, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ActualiserGeneration, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelValidateStep4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jRadioOne)
                .addGap(5, 5, 5)
                .addComponent(jRadioAll)
                .addGap(15, 15, 15)
                .addComponent(ActualiserGeneration, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabelValidateStep4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4.setBackground(new java.awt.Color(0, 51, 204));

        jLabel6.setFont(new java.awt.Font("Vrinda", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Copyright-2019 © M.A. Omrani & W. Naanaa - LIMTIC Lab");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 950, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jLabel10.setBackground(new java.awt.Color(0, 51, 204));
        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 204));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Generating process Of");

        jLabel5.setBackground(new java.awt.Color(0, 51, 204));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jPanel2.setBackground(new java.awt.Color(0, 51, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Constraint-Based Molecular Structure Generator version 1.0");

        jLabel2.setFont(new java.awt.Font("Utsaah", 0, 28)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("X");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        jLabel2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLabel2KeyPressed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Utsaah", 0, 28)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("?");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        jLabel7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLabel7KeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("CP-MolGen");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ActualiserGenerationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ActualiserGenerationMouseClicked
         // TODO add your handling code here:

          
      SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>(){
         @Override
         protected Void doInBackground() throws Exception {

            // mimic some long-running process here...
             
 
         jTextAreaResult.setText("");
       
        // define Model 
        // Collecte Molecular Data

        // define Model 
        IloCP cp = new IloCP();
        try {
            cp.setParameter(IloCP.DoubleParam.TimeLimit, 1000000);
            cp.setParameter(IloCP.IntParam.SearchType,IloCP.ParameterValues.DepthFirst);
            cp.setParameter(IloCP.IntParam.LogVerbosity, IloCP.ParameterValues.Quiet);
            cp.setParameter(IloCP.IntParam.Workers, 1);
        } catch (IloException ex) {
            Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        //variables Declaration 
        // Example of use :  IloIntVar x = cp.intVar(0, 10);
       //  int domaine[]={0,1,2,3};
       int N = FinalStepMol.GetNumberOfAtomsNoHydrogen();
        IloIntVar[][] MATRIX = new IloIntVar[N][];
        for (int i = 0; i < N; i++) {     
            try {   
                MATRIX[i] = cp.intVarArray(N,0,3);
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
  
        }  

        
        //***************************** Begin CONSTRAINTS ***********************************
        //************** Constraint 1: Null Diagonal of the Adjacency matrix *************
         for (int i=0; i<N; i++){      
            try {   
                cp.add(cp.eq(MATRIX[i][i], 0));
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //************** Constraint 2: Symetry of the Adjacency matrix *************
        for (int i=0; i<N; i++){
            for (int j=0; j<N; j++){
                try {   
                    cp.add(cp.eq(MATRIX[i][j], MATRIX[j][i]));
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }

        //************** Constraint 3: Define Degree Constraint *************
        for (Integer i=0; i<N; i++){
            int Degree_Of_Atom_i= Integer.parseInt((FinalStepMol.GettableOfValenceWithoutHydrogene().get(i.toString())).toString());

            try {   
        
                    cp.add(cp.eq(cp.sum(MATRIX[i]),Degree_Of_Atom_i));
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
        //************** Constraint 4: Hybridization state *************

        for (Integer i=0; i<N; i++){
                   
            int Hybridization_Of_Atom_i = Integer.parseInt((FinalStepMol.GettableOfHybridation().get(i.toString())).toString());
            //************** Constraint 4.1: Hybridization state SP3 ************* A revoir de le debut directement filtrer from domain value
            if ( Hybridization_Of_Atom_i==3){
            try {   
                    for (int j=0; j<N; j++){
                        cp.add(cp.le(MATRIX[i][j], 1));
                    }                    
                } catch (IloException ex) {
                    Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            //************** Constraint 4.2: Hybridization state SP2 ************* avec filtrage sur la valeur 3
            
            if ( Hybridization_Of_Atom_i==2){
            try {   
                    for (int j=0; j<N; j++){
                        cp.add(cp.ge(cp.count(MATRIX[i], 2), 1));
                        cp.add(cp.ge(cp.count(MATRIX[i], 3), 0));
                    }                    
                } catch (IloException ex) {
                    Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            
            //************** Constraint 4.3: Hybridization state SP1 *************          
            
            if ( Hybridization_Of_Atom_i==1){
            try {   
                    for (int j=0; j<N; j++){
                      cp.add(cp.or( cp.ge(cp.count(MATRIX[i], 3), 1)  , cp.ge( cp.count(MATRIX[i], 2),2)));  
                      //   cp.add(cp.eq(b[j], cp.gt(cp.count(v2, values[j]),0)));
                       //          .le(cp.sum(MATRIX[i]),4));
                      //  cp.add(cp.le(MATRIX[i][j], 1));
                    }                    
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
           
        }
        
       
        //************** Constraint 5: Certain Proximity RelationShips Constraint state (HMBC and BOND) *************
        int NbrCorrelations=FinalStepMol.NumberOfCorrelation;
       // System.out.println("NbrCorrelations "+NbrCorrelations);
       // IloIntVar[] correlations = new IloIntVar[NbrCorrelations] ;
        IloIntVar[] correlations=null;
        try {
            correlations = cp.intVarArray(NbrCorrelations,0,N);
        } catch (IloException ex) {
            Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (NbrCorrelations!=0){  
        // DEFINE CORRELATION VARIABLEs
            try {
            for (int i = 0; i < NbrCorrelations; i++) {      
                Integer ii = i+1;
                int Proximity=(int) FinalStepMol.tableOfCorrelationProximity.get(ii.toString());
                int Atom1=(int)  FinalStepMol.tableOfCorrelationatom1.get(ii.toString())-1;
                int Atom2=(int) FinalStepMol.tableOfCorrelationatom2.get(ii.toString())-1;
                //System.out.println("Proximity"+ Proximity);

                if (Proximity==1){   
                    cp.add(cp.neq(MATRIX[Atom1][Atom2],0));
                    cp.add(cp.eq(correlations[i],Atom2));
                    
                }else{   
                    //Example of use :  IloIntVar x = cp.intVar(0, 10);
                    //correlations[i]=cp.intVar(0, N-1);
                    for (int inter = 0; inter < N; inter++) {  
                        cp.add(cp.ifThen(cp.eq(correlations[i],inter), cp.and(cp.neq( MATRIX[Atom1][inter],0),cp.neq( MATRIX[Atom1][inter],0))));      
                    
                    }
                    //cp.add(cp.ifThen(cp.eq(MATRIX[Atom1][Atom2],0),cp.eq(correlations[i],0)))  ;
                    cp.add(cp.ifThenElse(  cp.eq(MATRIX[Atom1][Atom2],0),cp.eq(correlations[i],N)   ,  cp.neq(correlations[i],N)  ));

                }
            
            }
         
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
	}		


        //************** Constraint 6: Fragments Data (Imposed and Frobidden) *************
        //************** Constraint 61: Imposed Fragment*************
        if (FinalStepMol.ImposedFragments[0]==true||FinalStepMol.ImposedFragments[1]==true||FinalStepMol.ImposedFragments[2]==true||FinalStepMol.ImposedFragments[3]==true){
                //Cycle 3
                if (FinalStepMol.ImposedFragments[0]==true){

                    //IloIntVar[] LS3= new IloIntVar[3];
                    try {
                        IloIntVar[] LS3 = cp.intVarArray(3,0,N-1);
                       // cp.add(cp.allDiff(LS3)); zayda
                        cp.add(cp.le(LS3[0],LS3[1]) );                         
                        cp.add(cp.le(LS3[0],LS3[2]) );                       
                        cp.add(cp.le(LS3[1],LS3[2]) );

                    // 1 et 2
                    for(int i1=0; i1<N;i1++ ){
                        for(int i2=0; i2<N ;i2++ ){
                            cp.add(cp.imply(cp.and(cp.eq(LS3[0],i1), cp.eq(LS3[1],i2)),  cp.neq(MATRIX[i1][i2],0)));
                        }
                    }
                    
                    // 2 et 3
                    for(int i1=0; i1<N;i1++ ){
                        for(int i2=0; i2<N ;i2++ ){
                            cp.add(cp.imply(cp.and(cp.eq(LS3[1],i1), cp.eq(LS3[2],i2)),  cp.neq(MATRIX[i1][i2],0)));
                        }
                    }
                    // 3 et 1
                    for(int i1=0; i1<N;i1++ ){
                        for(int i2=0; i2<N ;i2++ ){
                            cp.add(cp.imply(cp.and(cp.eq(LS3[2],i1), cp.eq(LS3[0],i2)),  cp.neq(MATRIX[i1][i2],0)));
                        }
                    }
                    } catch (IloException ex) {
                        Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                    } 
                }  

                //#-------------Cycle 4--------------------#
                if (FinalStepMol.ImposedFragments[1]==true){

                    //IloIntVar[] LS4= new IloIntVar[4];
                    try {
                         IloIntVar[] LS4 = cp.intVarArray(4,0,N-1);
                    
                        cp.add(cp.allDiff(LS4));
                        cp.add(cp.lt(LS4[0],LS4[1]) );
                        cp.add(cp.lt(LS4[0],LS4[2]) );
                        cp.add(cp.lt(LS4[0],LS4[3]) );
                        cp.add(cp.lt(LS4[1],LS4[3]) );
                         
                    // 1 et 2
                    for(int elem=0; elem<N;elem++ ){
                        for(int elem2=0; elem2<N ;elem2++ ){
                            cp.add(cp.ifThen(cp.and(cp.eq(LS4[0],elem), cp.eq(LS4[1],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                        }
                    }
                    
                    // 2 et 3
                    for(int elem=0; elem<N;elem++ ){
                        for(int elem2=0; elem2<N ;elem2++ ){
                            cp.add(cp.ifThen(cp.and(cp.eq(LS4[1],elem), cp.eq(LS4[2],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                        }
                    }
                                       
                    // 3 et 4
                    for(int elem=0; elem<N;elem++ ){
                        for(int elem2=0; elem2<N ;elem2++ ){
                            cp.add(cp.ifThen(cp.and(cp.eq(LS4[2],elem), cp.eq(LS4[3],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                        }
                    }
                    
                    // 4 et 1
                    for(int elem=0; elem<N;elem++ ){
                        for(int elem2=0; elem2<N ;elem2++ ){
                            cp.add(cp.ifThen(cp.and(cp.eq(LS4[3],elem), cp.eq(LS4[0],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                        }

                    }
                    } catch (IloException ex) {
                        Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                    } 

                }
                //#-------------Cycle 5--------------------#
                if (FinalStepMol.ImposedFragments[2]==true){
                    //IloIntVar[] LS5 = new IloIntVar[5];
                    try {
                        IloIntVar[] LS5 = cp.intVarArray(5,0,N-1);
                    
 
                        cp.add(cp.allDiff(LS5));
                        cp.add(cp.lt(LS5[0],LS5[1]) );
                        cp.add(cp.lt(LS5[0],LS5[2]) );
                        cp.add(cp.lt(LS5[0],LS5[3]) );
                        cp.add(cp.lt(LS5[0],LS5[4]) );
                        cp.add(cp.lt(LS5[1],LS5[4]) );
                         
                        // 1 et 2
                        for(int elem=0; elem<N;elem++ ){
                            for(int elem2=0; elem2<N ;elem2++ ){
                                cp.add(cp.ifThen(cp.and(cp.eq(LS5[0],elem), cp.eq(LS5[1],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                            }
                        }

                        // 2 et 3
                        for(int elem=0; elem<N;elem++ ){
                            for(int elem2=0; elem2<N ;elem2++ ){
                                cp.add(cp.ifThen(cp.and(cp.eq(LS5[1],elem), cp.eq(LS5[2],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                            }
                        }

                        // 3 et 4
                        for(int elem=0; elem<N;elem++ ){
                            for(int elem2=0; elem2<N ;elem2++ ){
                                cp.add(cp.ifThen(cp.and(cp.eq(LS5[2],elem), cp.eq(LS5[3],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                            }
                        }
                        
                        
                        // 4 et 5
                        for(int elem=0; elem<N;elem++ ){
                            for(int elem2=0; elem2<N ;elem2++ ){
                                cp.add(cp.ifThen(cp.and(cp.eq(LS5[3],elem), cp.eq(LS5[4],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                            }
                        }

                        // 5 et 1
                        for(int elem=0; elem<N;elem++ ){
                            for(int elem2=0; elem2<N ;elem2++ ){
                                cp.add(cp.ifThen(cp.and(cp.eq(LS5[4],elem), cp.eq(LS5[0],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                            }
                        }
                    } catch (IloException ex) {
                        Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                    } 

                }
                
                // #-------------Cycle 6--------------------#
                if (FinalStepMol.ImposedFragments[3]==true){
                    //IloIntVar[] LS6= new IloIntVar[6];
                    try {
                        IloIntVar[] LS6 = cp.intVarArray(6,0,N-1);                    
                       
                        cp.add(cp.allDiff(LS6));
                        cp.add(cp.lt(LS6[0],LS6[1]) );
                        cp.add(cp.lt(LS6[0],LS6[2]) );
                        cp.add(cp.lt(LS6[0],LS6[3]) );
                        cp.add(cp.lt(LS6[0],LS6[4]) );
                        cp.add(cp.lt(LS6[0],LS6[5]) );
                        cp.add(cp.lt(LS6[1],LS6[5]) );
                                    
                        // 1 et 2
                        for(int elem=0; elem<N;elem++ ){
                            for(int elem2=0; elem2<N ;elem2++ ){
                                cp.add(cp.ifThen(cp.and(cp.eq(LS6[0],elem), cp.eq(LS6[1],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                            }
                        }

                        // 2 et 3
                        for(int elem=0; elem<N;elem++ ){
                            for(int elem2=0; elem2<N ;elem2++ ){
                                cp.add(cp.ifThen(cp.and(cp.eq(LS6[1],elem), cp.eq(LS6[2],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                            }
                        }

                        // 3 et 4
                        for(int elem=0; elem<N;elem++ ){
                            for(int elem2=0; elem2<N ;elem2++ ){
                                cp.add(cp.ifThen(cp.and(cp.eq(LS6[2],elem), cp.eq(LS6[3],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                            }
                        }
                        
                        
                        // 4 et 5
                        for(int elem=0; elem<N;elem++ ){
                            for(int elem2=0; elem2<N ;elem2++ ){
                                cp.add(cp.ifThen(cp.and(cp.eq(LS6[3],elem), cp.eq(LS6[4],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                            }
                        }
                        
                        // 5 et 6
                        for(int elem=0; elem<N;elem++ ){
                            for(int elem2=0; elem2<N ;elem2++ ){
                                cp.add(cp.ifThen(cp.and(cp.eq(LS6[4],elem), cp.eq(LS6[5],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                            }
                        }

                        // 6 et 1
                        for(int elem=0; elem<N;elem++ ){
                            for(int elem2=0; elem2<N ;elem2++ ){
                                cp.add(cp.ifThen(cp.and(cp.eq(LS6[5],elem), cp.eq(LS6[0],elem2)),  cp.neq(MATRIX[elem][elem2],0)));
                            }
                        }
                        
                    } catch (IloException ex) {
                        Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                    } 
                }
        }  
        
        
        //************** Constraint 61: Forbidden Fragment *************
        if (FinalStepMol.ForbiddenFragments[0]==true||FinalStepMol.ForbiddenFragments[1]==true||FinalStepMol.ForbiddenFragments[2]==true||FinalStepMol.ForbiddenFragments[3]==true){
            //#-------------Forbidding Cycle 3--------------------#
            
            if (FinalStepMol.ForbiddenFragments[0]==true){
                    //ArrayList<int[]> ExplicitCycle3= CyclesGeneration.Cycles(N, 3);
                    //#print "\n ExplicitCycle3",ExplicitCycle3
                    //#for cycle in ExplicitCycle3:
                    //#    cycle.append(cycle[0])
                    //#   model.add(  Min([Mesvariables[ (cycle[j]* n + cycle[j+1]) ] for j in range(3)]) ==0)
                for (int i = 0; i<FinalStepMol.ExplicitCycle3.size();i++) {  
                    int [] Aux = new int[3];
                    Aux=FinalStepMol.ExplicitCycle3.get(i);
                    try {
                        IloConstraint Cycle3Constraint [] = new IloConstraint[3]  ;
                        Cycle3Constraint[0]= cp.eq(MATRIX[Aux[0]][Aux[1]],0);
                        Cycle3Constraint[1]= cp.eq(MATRIX[Aux[1]][Aux[2]],0);
                        Cycle3Constraint[2]= cp.eq(MATRIX[Aux[2]][Aux[0]],0);
                        cp.add( cp.or( Cycle3Constraint   )  );
                    } catch (IloException ex) {
                            Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }


            //#-------------Forbidding Cycle 4--------------------#
            if (FinalStepMol.ForbiddenFragments[1]==true){
                    //ArrayList<int[]> ExplicitCycle4= CyclesGeneration.Cycles(N, 4);
                for (int i = 0; i<FinalStepMol.ExplicitCycle4.size();i++) {  
                    int [] Aux = new int[4];
                    Aux= FinalStepMol.ExplicitCycle4.get(i);
                    try {
                        IloConstraint Cycle4Constraint [] = new IloConstraint[4]  ;
                        Cycle4Constraint[0]= cp.eq(MATRIX[Aux[0]][Aux[1]],0);
                        Cycle4Constraint[1]= cp.eq(MATRIX[Aux[1]][Aux[2]],0);
                        Cycle4Constraint[2]= cp.eq(MATRIX[Aux[2]][Aux[3]],0);
                        Cycle4Constraint[3]= cp.eq(MATRIX[Aux[3]][Aux[0]],0);
                        cp.add( cp.or( Cycle4Constraint   )  );
                    } catch (IloException ex) {
                            Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }      


            //#-------------Forbidding Cycle 5--------------------#
            if (FinalStepMol.ForbiddenFragments[2]==true){
                   // ArrayList<int[]> ExplicitCycle5= CyclesGeneration.Cycles(N, 5);
                for (int i = 0; i<FinalStepMol.ExplicitCycle5.size();i++) {  
                    int [] Aux = new int[5];
                    Aux=FinalStepMol.ExplicitCycle5.get(i);
                    try {
                        IloConstraint Cycle5Constraint [] = new IloConstraint[5]  ;
                        Cycle5Constraint[0]= cp.eq(MATRIX[Aux[0]][Aux[1]],0);
                        Cycle5Constraint[1]= cp.eq(MATRIX[Aux[1]][Aux[2]],0);
                        Cycle5Constraint[2]= cp.eq(MATRIX[Aux[2]][Aux[3]],0);
                        Cycle5Constraint[3]= cp.eq(MATRIX[Aux[3]][Aux[4]],0);
                        Cycle5Constraint[4]= cp.eq(MATRIX[Aux[4]][Aux[0]],0);
                        cp.add( cp.or( Cycle5Constraint   )  );
                    } catch (IloException ex) {
                            Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }    



            //#-------------Forbidding Cycle 6--------------------#
            if (FinalStepMol.ForbiddenFragments[3]==true){
                    //ArrayList<int[]> ExplicitCycle6= CyclesGeneration.Cycles(N, 6);
                for (int i = 0; i<FinalStepMol.ExplicitCycle6.size();i++) {  
                    int [] Aux = new int[6];
                    Aux=FinalStepMol.ExplicitCycle6.get(i);
                    try {
                        IloConstraint Cycle6Constraint [] = new IloConstraint[6]  ;
                        Cycle6Constraint[0]= cp.eq(MATRIX[Aux[0]][Aux[1]],0);
                        Cycle6Constraint[1]= cp.eq(MATRIX[Aux[1]][Aux[2]],0);
                        Cycle6Constraint[2]= cp.eq(MATRIX[Aux[2]][Aux[3]],0);
                        Cycle6Constraint[3]= cp.eq(MATRIX[Aux[3]][Aux[4]],0);
                        Cycle6Constraint[4]= cp.eq(MATRIX[Aux[4]][Aux[5]],0);
                        Cycle6Constraint[5]= cp.eq(MATRIX[Aux[5]][Aux[0]],0);
                        cp.add( cp.or( Cycle6Constraint   )  );
                    } catch (IloException ex) {
                            Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }    
            
            
        }
        //***************************** End CONSTRAINTS ***********************************#
        //***************** Begin Solution Generation Process ****************************#
        
        if (jRadioOne.isSelected()){
            //**** single solution generation ****
            try {
                Date Start = new Date();
                if (cp.solve()) {    
                    FinalStepMol.Matrix=new int [N][N];
                    
                    for (int i=0; i<N; i++){
                        for (int j=0; j<N; j++){
                            //System.out.print(" "+(int) cp.getValue(MATRIX[i][j]) );
                            FinalStepMol.Matrix[i][j]=(int) cp.getValue(MATRIX[i][j]) ;
                            jTextAreaResult.append(" "+(int) cp.getValue(MATRIX[i][j]));
                        }
                        //System.out.print("\n ");
                        jTextAreaResult.append("\n");
                    }
                    /*
                    if (NbrCorrelations!=0){  
                        for (int i = 0; i < NbrCorrelations; i++) {                                             
                            System.out.println("\n");
                            System.out.print("correlations["+i+"]:"+ (int)cp.getValue(correlations[i]));
                        }
                    }
                    */
                    jLabelValidateStep4.setVisible(true);
                    
                     Date Stop = new Date();
                    double diff = Stop.getTime() - Start.getTime() ;
                    diff = diff /1000 %60 ;                 
                    JOptionPane.showMessageDialog(null,"Molecular Structure is successfully generated \n CPU Time: "+diff+" Second(s) \n Thanks for trying ! ", "Error Messsage", JOptionPane.INFORMATION_MESSAGE);
                    cp.endSearch();
                    cp.abortSearch();
                }else {
                    //System.out.println("No solution found.");
                    jTextAreaResult.append("No solution found.");
                    
                     
                    JOptionPane.showMessageDialog(null,"No Molecular Structures with this configuration \n Thanks for trying ! \n Close and Try again !", "Information Messsage", JOptionPane.INFORMATION_MESSAGE);
                 }  
            } catch (Exception ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
  
            if (jRadioAll.isSelected()){
                
                  //**** All Solution generation ****#

            try{
                Date Start = new Date();
                boolean ok = false;
                cp.startNewSearch();
                int compteur = 0;
                while (cp.next()) {
                    compteur++;
                    ok = true;
                    //System.out.println("\n \n Solution N°: "+compteur);
                    jTextAreaResult.append("\n \n Solution N°: "+compteur+"\n");
                    for (int i=0; i<N; i++){
                        for (int j=0; j<N; j++){
                            //System.out.print(" "+(int) cp.getValue(MATRIX[i][j]) );
                            jTextAreaResult.append(" "+(int) cp.getValue(MATRIX[i][j]));
                        }
                        //System.out.print("\n");
                        jTextAreaResult.append("\n ");
                    }
                    /*
                    if (NbrCorrelations!=0){  
                        for (int i = 0; i < NbrCorrelations; i++) {                                             
                            System.out.println("\n");
                            System.out.print("correlations["+i+"]:"+ (int)cp.getValue(correlations[i]));
                        }
                    }
                    */
                }
                cp.endSearch();
                if (!ok){
                    //System.out.println("No solution found.");
                    jTextAreaResult.append("No solution found.");
                    JOptionPane.showMessageDialog(null," No Molecular Structures with this configuration \n Try again", "Error Messsage", JOptionPane.INFORMATION_MESSAGE);
                }else{ 
                    Date Stop = new Date();
                    double diff = Stop.getTime() - Start.getTime() ;
                     diff = diff /1000 %60 ;
                    JOptionPane.showMessageDialog(null,""+compteur+" Solution(s) found with this configuration \n CPU Time: "+diff+" Second(s) \n Thanks for trying...", "Information Messsage", JOptionPane.INFORMATION_MESSAGE);}
                
               // cp.clearAbort();                
                //cp.end();
                
            } catch (Exception e) {
                System.err.println("Error " + e);
            }
  
            }
        }
             
             
             
             // END long-running process 

           // Thread.sleep(SLEEP_TIME);
            return null;
         }
      };

      //Window win = SwingUtilities.getWindowAncestor((AbstractButton)evt.getSource());
      final JDialog dialog = new JDialog(this, "Molecular Structure Building Process", Dialog.ModalityType.APPLICATION_MODAL);

      mySwingWorker.addPropertyChangeListener(new PropertyChangeListener() {

         @Override
         public void propertyChange(PropertyChangeEvent evt) {
            if (evt.getPropertyName().equals("state")) {
               if (evt.getNewValue() == SwingWorker.StateValue.DONE) {
                  dialog.dispose();
               }
            }
         }
      });
      mySwingWorker.execute();

      JProgressBar progressBar = new JProgressBar();
 
      
   
      
      progressBar.setIndeterminate(true);
      JPanel panel = new JPanel(new BorderLayout());
      
      
      //begin Personaliser
       panel.setBackground(new java.awt.Color(255, 255, 255));
     
       panel.setPreferredSize(new Dimension(530,60));
      // end personaliser 
      
      panel.add(progressBar, BorderLayout.CENTER);
      panel.add(new JLabel("Please wait, it may take a few minutes ......."), BorderLayout.PAGE_START);
      dialog.add(panel);
      dialog.pack();
      dialog.setLocationRelativeTo(this);
      dialog.setVisible(true);
      
      
     
   
       
 /*
      
      jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(45, 118, 232));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/molecular/structure/generator/v1/pkg0/images/icons8_Spinner_Frame_3_100px.png"))); // NOI18N
        jLabel2.setText("Loading . . .");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 523, 95));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
      
      */
        
  
    }//GEN-LAST:event_ActualiserGenerationMouseClicked

    private void jRadioOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioOneActionPerformed
        // TODO add your handling code here:
        jRadioOne.setSelected(true);
        jRadioAll.setSelected(false);
    }//GEN-LAST:event_jRadioOneActionPerformed

    private void jRadioAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioAllActionPerformed
        // TODO add your handling code here:
           jRadioOne.setSelected(false);
        jRadioAll.setSelected(true);
    }//GEN-LAST:event_jRadioAllActionPerformed

    private void jLabelValidateStep4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelValidateStep4MouseClicked
        // TODO add your handling code here:
    
    if (this.FinalStepMol.Matrix!=null){  
        int N = this.FinalStepMol.GetNumberOfAtomsNoHydrogen();
  // Vertex creation 
    String [] Sy=new String [N] ;
    for (Integer h=0; h<N;h++){
            String S = this.FinalStepMol.GettableOfSymboles().get(h.toString()).toString().toUpperCase();
            Sy[h]=S;        
    }
      

    //System.out.println("Solution: " + Arrays.asList(Mesvariables));
    for (int i=0; i<N; i++){      
        for (int j=0; j<N; j++){
               //int ij = i*N + j ; 
                    Integer v = this.FinalStepMol.Matrix[i][j];
                    String re =this.FinalStepMol.Matrix[i][j]+"   ";
                    //System.out.print(Mesvariables[ij].dom()+"   ");
                    //jTextArea2.append(re);                    
                    //if (v !=0 ){MG.addedge(i, j, v);   }    
        }
        //  System.out.println('\n');
          //jTextArea2.append("\n");
    }
// Molecular Graph Showing
    //Molecular graph Creating
    GraphModelisation GM = new GraphModelisation();
    //this.FinalStepMol.ReadHashtable(this.FinalStepMol.GettableOfSymboles());
    
    SparseMultigraph<MyNode,MyLink> MoleculeGraph = GM.CreateMatrix(this.FinalStepMol.Matrix,this.FinalStepMol.GettableOfSymboles());
    GM.PlotGraph(MoleculeGraph,this.FinalStepMol.GetStringOfMolecularFormula());

}else{System.out.println("*** No Solution found");
JOptionPane.showMessageDialog(this," No Solution found", "Error", JOptionPane.INFORMATION_MESSAGE);
    }

   
                                 
        
        
        
    }//GEN-LAST:event_jLabelValidateStep4MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel2KeyPressed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jLabel2KeyPressed

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:
        new Help().setVisible(true);
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel7KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel7KeyPressed

    /**
     * @param args the command line arguments
     */
    

    

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ActualiserGeneration;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelValidateStep4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioAll;
    private javax.swing.JRadioButton jRadioOne;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaResult;
    // End of variables declaration//GEN-END:variables
}
