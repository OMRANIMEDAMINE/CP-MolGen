    

        jTextAreaResult.setText("");
        int N = this.FinalStepMol.GetNumberOfAtomsNoHydrogen();
        // define Model 
        // Collecte Molecular Data

        // define Model 
        IloCP cp = new IloCP();
       
        //variables Declaration 
        // Example of use :  IloIntVar x = cp.intVar(0, 10);
       //  int domaine[]={0,1,2,3};
       
        IloIntVar[][] MATRIX = new IloIntVar[N][];
        for (int i = 0; i < N; i++) {
           
            try {
                MATRIX[i] = cp.intVarArray(N,0,3);
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
  
        }  

        
        //***************************** Begin CONSTRAINTS ***********************************//
        //************** Constraint 1: Null Diagonal of the Adjacency matrix *************//
         for (int i=0; i<N; i++){      
            try {   
                cp.add(cp.eq(MATRIX[i][i], 0));
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //************** Constraint 2: Symetry of the Adjacency matrix *************//
        for (int i=0; i<N; i++){
            for (int j=0; j<N; j++){
                try {   
                    cp.add(cp.eq(MATRIX[i][j], MATRIX[j][i]));
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }

        //************** Constraint 3: Define Degree Constraint *************//
        for (Integer i=0; i<N; i++){
            int Degree_Of_Atom_i= Integer.parseInt((this.FinalStepMol.GettableOfValenceWithoutHydrogene().get(i.toString())).toString());

            try {   
        
                    cp.add(cp.eq(cp.sum(MATRIX[i]),Degree_Of_Atom_i));
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
        //************** Constraint 4: Hybridization state *************//

        for (Integer i=0; i<N; i++){
                   
            int Hybridization_Of_Atom_i = Integer.parseInt((FinalStepMol.GettableOfHybridation().get(i.toString())).toString());
            //************** Constraint 4.1: Hybridization state SP3 *************// A revoir de le debut directement filtrer from domain value
            if ( Hybridization_Of_Atom_i==3){
            try {   
                    for (int j=0; j<N; j++){
                        cp.add(cp.le(MATRIX[i][j], 1));
                    }                    
                } catch (IloException ex) {
                    Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            //************** Constraint 4.2: Hybridization state SP2 *************// avec filtrage sur la valeur 3
            
            if ( Hybridization_Of_Atom_i==2){
            try {   
                    for (int j=0; j<N; j++){
                        cp.add(cp.ge(cp.count(MATRIX[i], 2), 1));
                        cp.add(cp.ge(cp.count(MATRIX[i], 3), 0));
                    }                    
                } catch (IloException ex) {
                    Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            
            //************** Constraint 4.3: Hybridization state SP1 *************//           
            
            if ( Hybridization_Of_Atom_i==1){
            try {   
                    for (int j=0; j<N; j++){
                      cp.add(cp.or( cp.ge(cp.count(MATRIX[i], 3), 1)  , cp.ge( cp.count(MATRIX[i], 2),2)));  
                      //   cp.add(cp.eq(b[j], cp.gt(cp.count(v2, values[j]),0)));
                       //          .le(cp.sum(MATRIX[i]),4));
                      //  cp.add(cp.le(MATRIX[i][j], 1));
                    }                    
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
           
        }
        
       
        //************** Constraint 5: Certain Proximity RelationShips Constraint state (HMBC and BOND) *************//
        int NbrCorrelations=this.FinalStepMol.NumberOfCorrelation;
        System.out.println("NbrCorrelations "+NbrCorrelations);
         IloIntVar[] correlations  = new IloIntVar[NbrCorrelations];
        // MATRIX[i] = cp.intVarArray(NbrCorrelations,0,3);
        if (NbrCorrelations!=0){  
        // DEFINE CORRELATION VARIABLEs
            try {
            for (int i = 0; i < NbrCorrelations; i++) {      
                Integer ii = i+1;
                int Proximity=(int) this.FinalStepMol.tableOfCorrelationProximity.get(ii.toString());
                int Atom1=(int)  this.FinalStepMol.tableOfCorrelationatom1.get(ii.toString());
                int Atom2=(int) this.FinalStepMol.tableOfCorrelationatom2.get(ii.toString());
                //System.out.println("Proximity"+ Proximity);

                if (Proximity==1){   
                    cp.add(cp.neq(MATRIX[Atom1][Atom2],0));
                    correlations[i]=cp.intVar(Atom2, Atom2);
                }else{   
                    //Example of use :  IloIntVar x = cp.intVar(0, 10);
                    correlations[i]=cp.intVar(0, N);
                    for (int inter = 0; inter < N; inter++) {  
                        cp.add(cp.ifThen(cp.eq(correlations[i],inter), cp.and(cp.neq( MATRIX[Atom1][inter],0),cp.neq( MATRIX[Atom1][inter],0))));      
                    
                    }
                    cp.add(cp.ifThen(cp.eq(MATRIX[Atom1][Atom2],0),cp.eq(correlations[i],0)))  ;

                }
            
            }
         
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
	}		

                            
        //***************************** End CONSTRAINTS ***********************************//
        //***************** Begin Solution Generation Process ****************************//
        
        if (jRadioOne.isSelected()){
            //**** single solution generation ****//
            try {
                if (cp.solve()) {    

                    for (int i=0; i<N; i++){
                        for (int j=0; j<N; j++){
                            System.out.print("\t "+(int) cp.getValue(MATRIX[i][j]) );
                            jTextAreaResult.append("\t "+(int) cp.getValue(MATRIX[i][j]));
                        }
                        System.out.print("\n ");
                        jTextAreaResult.append("\n");
                    }
                    for (int i = 0; i < NbrCorrelations; i++) {                                             
                        System.out.println("\n");
                        System.out.print("correlations["+i+"]:"+cp.getValue(correlations[i]));
                    }

                }else {
                    System.out.println("No solution found.");
                    jTextAreaResult.append("No solution found.");
                    JOptionPane.showMessageDialog(this," No Solution found", "Error", JOptionPane.INFORMATION_MESSAGE);
                }  
            } catch (IloException ex) {
                Logger.getLogger(FinalStep.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            if (jRadioAll.isSelected()){
                
                  //**** All Solution generation ****//
            try{
                boolean ok = false;
                cp.startNewSearch();
                int compteur = 0;
                while (cp.next()) {
                    compteur++;
                    ok = true;
                    System.out.println("\n \n Solution N°: "+compteur);
                    jTextAreaResult.append("\n \n Solution N°: "+compteur+"\n");
                    for (int i=0; i<N; i++){
                        for (int j=0; j<N; j++){
                            System.out.print("\t "+(int) cp.getValue(MATRIX[i][j]) );
                            jTextAreaResult.append("\t "+(int) cp.getValue(MATRIX[i][j]));
                        }
                        System.out.print("\n");
                        jTextAreaResult.append("\n ");
                    }
                    for (int i = 0; i < NbrCorrelations; i++) {                                             
                        System.out.println("\n");
                        System.out.print("correlations["+i+"]:"+cp.getValue(correlations[i]));
                    }
                }
                cp.endSearch();
                if (!ok){
                    System.out.println("No solution found.");
                    jTextAreaResult.append("No solution found.");
                    JOptionPane.showMessageDialog(this," No Solution found", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                cp.end();
            } catch (IloException e) {
                System.err.println("Error " + e);
            }

                
                
            }
        }
    
           